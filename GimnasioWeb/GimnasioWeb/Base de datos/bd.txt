CREATE DATABASE Gym;
GO

USE Gym;
GO

-- ===========================
-- TABLAS
-- ===========================

-- Tabla Roles
CREATE TABLE Roles (
    IdRol INT IDENTITY(1,1) PRIMARY KEY,
    NombreRol NVARCHAR(100) NOT NULL UNIQUE,
    Estado BIT DEFAULT 1
);

-- Tabla Usuarios
CREATE TABLE Usuarios (
    IdUsuario INT IDENTITY(1,1) PRIMARY KEY,
    Identificacion NVARCHAR(100) NOT NULL,
    Nombre NVARCHAR(100) NOT NULL,
    Apellido NVARCHAR(100) NOT NULL,
    Correo NVARCHAR(150) NOT NULL UNIQUE,
    Contrasena NVARCHAR(255) NOT NULL,
    Telefono NVARCHAR(15),
    Rol INT NOT NULL,
    FechaRegistro DATETIME DEFAULT GETDATE(),
    Estado BIT DEFAULT 1,
    UsaClaveTemp BIT DEFAULT 0,
    Vigencia DATETIME NULL,
    CONSTRAINT FK_Usuarios_Roles FOREIGN KEY (Rol) REFERENCES Roles(IdRol)
);

-- Tabla Entrenadores
CREATE TABLE Entrenadores (
    IdEntrenador INT IDENTITY(1,1) PRIMARY KEY,
    Identificacion NVARCHAR(100) NOT NULL UNIQUE,
    Nombre NVARCHAR(100) NOT NULL,
    Apellido NVARCHAR(100) NOT NULL,
    Especialidad NVARCHAR(100),
    Correo NVARCHAR(150) NOT NULL UNIQUE,
    Telefono NVARCHAR(15),
    Disponibilidad NVARCHAR(50),
    Estado BIT DEFAULT 1,
    Rol INT NOT NULL,
    CONSTRAINT FK_Entrenadores_Roles FOREIGN KEY (Rol) REFERENCES Roles(IdRol)
);

-- Tabla Clases
CREATE TABLE Clases (
    IdClase INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Descripcion NVARCHAR(255),
    Nivel NVARCHAR(50),
    FechaHora DATETIME NOT NULL,
    Duracion INT NOT NULL,
    IdEntrenador INT FOREIGN KEY REFERENCES Entrenadores(IdEntrenador),
    CapacidadMaxima INT NOT NULL,
    Estado BIT DEFAULT 1
);

-- Tabla Reservas
CREATE TABLE Reservas (
    IdReserva INT IDENTITY(1,1) PRIMARY KEY,
    IdUsuario INT FOREIGN KEY REFERENCES Usuarios(IdUsuario),
    IdClase INT FOREIGN KEY REFERENCES Clases(IdClase),
    FechaReserva DATETIME DEFAULT GETDATE(),
    Estado NVARCHAR(50) DEFAULT 'Confirmada'
);

-- Tabla PlanesMembresia
CREATE TABLE PlanesMembresia (
    IdPlan INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Descripcion NVARCHAR(255),
    Precio DECIMAL(10,2) NOT NULL,
    Duracion INT NOT NULL,
    Beneficios NVARCHAR(255)
);

-- Tabla Pagos
CREATE TABLE Pagos (
    IdPago INT IDENTITY(1,1) PRIMARY KEY,
    IdUsuario INT FOREIGN KEY REFERENCES Usuarios(IdUsuario),
    IdPlan INT FOREIGN KEY REFERENCES PlanesMembresia(IdPlan),
    FechaPago DATETIME DEFAULT GETDATE(),
    Monto DECIMAL(10,2) NOT NULL,
    Estado NVARCHAR(50) DEFAULT 'Completado'
);

-- Tabla Progresos
CREATE TABLE Progresos (
    IdProgreso INT IDENTITY(1,1) PRIMARY KEY,
    IdUsuario INT FOREIGN KEY REFERENCES Usuarios(IdUsuario),
    FechaRegistro DATETIME DEFAULT GETDATE(),
    Peso DECIMAL(5,2),
    Repeticiones INT,
    Tiempo INT,
    Comentario NVARCHAR(255)
);

-- Tabla Notificaciones
CREATE TABLE Notificaciones (
    IdNotificacion INT IDENTITY(1,1) PRIMARY KEY,
    IdUsuario INT FOREIGN KEY REFERENCES Usuarios(IdUsuario),
    Titulo NVARCHAR(100) NOT NULL,
    Mensaje NVARCHAR(255) NOT NULL,
    FechaEnvio DATETIME DEFAULT GETDATE(),
    Estado BIT DEFAULT 0
);

-- Tabla Inventario
CREATE TABLE Inventario (
    IdProducto INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Descripcion NVARCHAR(255),
    Precio DECIMAL(10,2) NOT NULL,
    Stock INT NOT NULL,
    Estado BIT DEFAULT 1
);

-- Tabla Errores
CREATE TABLE Errores (
    IdError INT IDENTITY(1,1) PRIMARY KEY,
    Mensaje NVARCHAR(255) NOT NULL,
    Detalle NVARCHAR(MAX),
    FechaError DATETIME DEFAULT GETDATE(),
    Usuario INT NULL FOREIGN KEY REFERENCES Usuarios(IdUsuario),
    Estado NVARCHAR(50) DEFAULT 'Pendiente'
);

-- ===========================
-- INSERTS
-- ===========================
-- Insertar roles en la tabla Roles
INSERT INTO Roles (NombreRol, Estado) 
VALUES 
    ('Administrador', 1),
    ('Entrenador', 1),
    ('Cliente', 1);
GO

-- ===========================
-- PROCEDIMIENTOS ALMACENADOS
-- ===========================

-- Registrar Usuario
CREATE PROCEDURE RegistrarUsuario
    @Identificacion NVARCHAR(100),
    @Nombre NVARCHAR(100),
    @Apellido NVARCHAR(100),
    @Correo NVARCHAR(150),
    @Contrasena NVARCHAR(255),
    @Telefono NVARCHAR(15),
    @Rol INT = 3 -- Valor por defecto: Cliente
AS
BEGIN
    -- Validar que el correo no exista
    IF EXISTS (SELECT 1 FROM Usuarios WHERE Correo = @Correo)
    BEGIN
        PRINT 'El correo ya está registrado.';
        RETURN;
    END

    -- Validar que la identificación no exista
    IF EXISTS (SELECT 1 FROM Usuarios WHERE Identificacion = @Identificacion)
    BEGIN
        PRINT 'La identificación ya está registrada.';
        RETURN;
    END

    -- Insertar el usuario
    INSERT INTO Usuarios (Identificacion, Nombre, Apellido, Correo, Contrasena, Telefono, Rol)
    VALUES (@Identificacion, @Nombre, @Apellido, @Correo, @Contrasena, @Telefono, @Rol);

    PRINT 'Usuario registrado exitosamente.';
END;
GO


-- Iniciar Sesión
CREATE PROCEDURE IniciarSesion
    @Correo NVARCHAR(150),
    @Contrasena NVARCHAR(255)
AS
BEGIN
    SELECT IdUsuario, Nombre, Apellido, Rol, Estado
    FROM Usuarios
    WHERE Correo = @Correo AND Contrasena = @Contrasena AND Estado = 1;
END;
GO

-- Actualizar Contraseña
CREATE PROCEDURE ActualizarContrasena
    @IdUsuario INT,
    @Contrasena NVARCHAR(255),
    @UsaClaveTemp BIT,
    @Vigencia DATETIME
AS
BEGIN
    UPDATE Usuarios
    SET Contrasena = @Contrasena,
        UsaClaveTemp = @UsaClaveTemp,
        Vigencia = @Vigencia
    WHERE IdUsuario = @IdUsuario;
END;
GO

-- RegistrarEntrenador
CREATE PROCEDURE RegistrarEntrenador
    @Identificacion NVARCHAR (100),
    @Nombre NVARCHAR(100),
    @Apellido NVARCHAR(100),
    @Especialidad NVARCHAR(100),
    @Correo NVARCHAR(150),
	@Contrasena NVARCHAR(150),
    @Telefono NVARCHAR(150),
    @Disponibilidad NVARCHAR(50),
    @Rol INT = 2 -- Rol por defecto: Entrenador
AS
BEGIN
  

    -- Validar que el correo no exista
    IF EXISTS (SELECT 1 FROM Entrenadores WHERE Correo = @Correo)
    BEGIN
        PRINT 'El correo ya está registrado.';
        RETURN;
    END

    -- Insertar entrenador
    INSERT INTO Entrenadores(Identificacion,Nombre, Apellido, Especialidad, Correo,Contrasena, Telefono, Disponibilidad,Rol)
    VALUES (@Identificacion,@Nombre, @Apellido, @Especialidad, @Correo,@Contrasena, @Telefono, @Disponibilidad, @Rol);

    PRINT 'Entrenador registrado exitosamente.';
END;

go

--RegistrarProceso
CREATE PROCEDURE RegistrarProgreso
    @IdUsuario INT,
    @Peso DECIMAL(5,2),
    @Repeticiones INT,
    @Tiempo INT,
    @Comentario NVARCHAR(255)
AS
BEGIN
    -- Validar que el usuario exista
    IF NOT EXISTS (SELECT 1 FROM Usuarios WHERE IdUsuario = @IdUsuario)
    BEGIN
        PRINT 'El usuario no existe.';
        RETURN;
    END

    -- Insertar el progreso
    INSERT INTO Progresos (IdUsuario, Peso, Repeticiones, Tiempo, Comentario)
    VALUES (@IdUsuario, @Peso, @Repeticiones, @Tiempo, @Comentario);

    PRINT 'Progreso registrado exitosamente.';
END;
GO

--registrarClases
CREATE PROCEDURE RegistrarClase
    @Nombre NVARCHAR(100),
    @Descripcion NVARCHAR(255),
    @Nivel NVARCHAR(50),
    @FechaHora DATETIME,
    @Duracion INT,
    @IdEntrenador INT,
    @CapacidadMaxima INT
AS
BEGIN
    -- Validar que el entrenador exista
    IF NOT EXISTS (SELECT 1 FROM Entrenadores WHERE IdEntrenador = @IdEntrenador)
    BEGIN
        PRINT 'El entrenador no existe.';
        RETURN;
    END

    -- Insertar la clase
    INSERT INTO Clases (Nombre, Descripcion, Nivel, FechaHora, Duracion, IdEntrenador, CapacidadMaxima)
    VALUES (@Nombre, @Descripcion, @Nivel, @FechaHora, @Duracion, @IdEntrenador, @CapacidadMaxima);

    PRINT 'Clase registrada exitosamente.';
END;
GO


-- registrarReservas
CREATE PROCEDURE RegistrarReserva
    @IdUsuario INT,
    @IdClase INT
AS
BEGIN
    -- Validar que el usuario exista
    IF NOT EXISTS (SELECT 1 FROM Usuarios WHERE IdUsuario = @IdUsuario)
    BEGIN
        PRINT 'El usuario no existe.';
        RETURN;
    END

    -- Validar que la clase exista
    IF NOT EXISTS (SELECT 1 FROM Clases WHERE IdClase = @IdClase)
    BEGIN
        PRINT 'La clase no existe.';
        RETURN;
    END

    -- Insertar la reserva
    INSERT INTO Reservas (IdUsuario, IdClase)
    VALUES (@IdUsuario, @IdClase);

    PRINT 'Reserva registrada exitosamente.';
END;
GO

-- ===========================
-- Consultas
-- ===========================

--consulta usuarios
  CREATE PROCEDURE ConsultarUsuarios
AS
BEGIN
    SELECT 
        u.IdUsuario,
        u.Nombre,
        u.Apellido,
        u.Correo,
        r.NombreRol AS Rol
    FROM Usuarios u
    INNER JOIN Roles r ON u.Rol = r.IdRol
    WHERE u.Estado = 1; -- Solo los usuarios activos
END




--consultar entrenadores
CREATE PROCEDURE ConsultarEntrenadores
AS
BEGIN
    -- Consultar todos los entrenadores activos
    SELECT IdEntrenador, Identificacion, Nombre, Apellido, Especialidad, Correo, Telefono, Disponibilidad, Estado
    FROM Entrenadores
    WHERE Estado = 1;

    PRINT 'Consulta realizada exitosamente.';
END;
GO


-- consulta clases disponibles
CREATE PROCEDURE ConsultarClases
AS
BEGIN
    -- Consultar todas las clases activas
    SELECT C.IdClase, C.Nombre, C.Descripcion, C.Nivel, C.FechaHora, C.Duracion, E.Nombre AS Entrenador, C.CapacidadMaxima, C.Estado
    FROM Clases C
    INNER JOIN Entrenadores E ON C.IdEntrenador = E.IdEntrenador
    WHERE C.Estado = 1;

    PRINT 'Consulta realizada exitosamente.';
END;
GO


--